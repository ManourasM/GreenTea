#include "Input.h"

#include <SDL.h>

#include <unordered_map>

namespace GTE {

	bool Input::MouseButtonPressed(MouseButtonType type)
	{
		switch (type)
		{
		case MouseButtonType::Left:		return (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT));
		case MouseButtonType::Right:	return (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_RIGHT));
		case MouseButtonType::Wheel:	return (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_MIDDLE));
		default:						return false;
		}
	}

	static std::unordered_map<KeyCode, int32> keymap =
	{
		{KEY_0, SDL_SCANCODE_0},
		{KEY_1, SDL_SCANCODE_1},
		{KEY_2, SDL_SCANCODE_2},
		{KEY_3, SDL_SCANCODE_3},
		{KEY_4, SDL_SCANCODE_4},
		{KEY_5, SDL_SCANCODE_5},
		{KEY_6, SDL_SCANCODE_6},
		{KEY_7, SDL_SCANCODE_7},
		{KEY_8, SDL_SCANCODE_8},
		{KEY_9, SDL_SCANCODE_9},
		{KEY_NUMPAD0, SDL_SCANCODE_KP_0},
		{KEY_NUMPAD1, SDL_SCANCODE_KP_1},
		{KEY_NUMPAD2, SDL_SCANCODE_KP_2},
		{KEY_NUMPAD3, SDL_SCANCODE_KP_3},
		{KEY_NUMPAD4, SDL_SCANCODE_KP_4},
		{KEY_NUMPAD5, SDL_SCANCODE_KP_5},
		{KEY_NUMPAD6, SDL_SCANCODE_KP_6},
		{KEY_NUMPAD7, SDL_SCANCODE_KP_7},
		{KEY_NUMPAD8, SDL_SCANCODE_KP_8},
		{KEY_NUMPAD9, SDL_SCANCODE_KP_9},
		{KEY_F1, SDL_SCANCODE_F1},
		{KEY_F2, SDL_SCANCODE_F2},
		{KEY_F3, SDL_SCANCODE_F3},
		{KEY_F4, SDL_SCANCODE_F4},
		{KEY_F5, SDL_SCANCODE_F5},
		{KEY_F6, SDL_SCANCODE_F6},
		{KEY_F7, SDL_SCANCODE_F7},
		{KEY_F8, SDL_SCANCODE_F8},
		{KEY_F9, SDL_SCANCODE_F9},
		{KEY_F10, SDL_SCANCODE_F10},
		{KEY_F11, SDL_SCANCODE_F11},
		{KEY_F12, SDL_SCANCODE_F12},
		{KEY_ESCAPE, SDL_SCANCODE_ESCAPE},
		{KEY_BACKQUOTE, SDL_SCANCODE_GRAVE},
		{KEY_TAB, SDL_SCANCODE_TAB},
		{KEY_CAPSLOCK, SDL_SCANCODE_CAPSLOCK},
		{KEY_LEFT_SHIFT, SDL_SCANCODE_LSHIFT},
		{KEY_RIGHT_SHIFT, SDL_SCANCODE_RSHIFT},
		{KEY_LEFT_CONTROL, SDL_SCANCODE_LCTRL},
		{KEY_RIGHT_CONTROL, SDL_SCANCODE_RCTRL},
		{KEY_LEFT_ALT, SDL_SCANCODE_LALT},
		{KEY_WINDOWS, SDL_SCANCODE_APPLICATION},
		{KEY_ENTER, SDL_SCANCODE_RETURN},
		{KEY_BACKSPACE, SDL_SCANCODE_BACKSPACE},
		{KEY_SPACE, SDL_SCANCODE_SPACE},
		{KEY_MINUS, SDL_SCANCODE_MINUS},
		{KEY_SPACE, SDL_SCANCODE_SPACE},
		{KEY_PLUS, SDL_SCANCODE_EQUALS},
		{KEY_A, SDL_SCANCODE_A},
		{KEY_B, SDL_SCANCODE_B},
		{KEY_C, SDL_SCANCODE_C},
		{KEY_D, SDL_SCANCODE_D},
		{KEY_E, SDL_SCANCODE_E},
		{KEY_F, SDL_SCANCODE_F},
		{KEY_G, SDL_SCANCODE_G},
		{KEY_H, SDL_SCANCODE_H},
		{KEY_I, SDL_SCANCODE_I},
		{KEY_J, SDL_SCANCODE_J},
		{KEY_K, SDL_SCANCODE_K},
		{KEY_L, SDL_SCANCODE_L},
		{KEY_M, SDL_SCANCODE_M},
		{KEY_N, SDL_SCANCODE_N},
		{KEY_O, SDL_SCANCODE_O},
		{KEY_P, SDL_SCANCODE_P},
		{KEY_Q, SDL_SCANCODE_Q},
		{KEY_R, SDL_SCANCODE_R},
		{KEY_S, SDL_SCANCODE_S},
		{KEY_T, SDL_SCANCODE_T},
		{KEY_U, SDL_SCANCODE_U},
		{KEY_V, SDL_SCANCODE_V},
		{KEY_W, SDL_SCANCODE_W},
		{KEY_X, SDL_SCANCODE_X},
		{KEY_Y, SDL_SCANCODE_Y},
		{KEY_Z, SDL_SCANCODE_Z},
		{KEY_OPEN_BRACKET, SDL_SCANCODE_LEFTBRACKET},
		{KEY_CLOSE_BRACKET , SDL_SCANCODE_RIGHTBRACKET},
		{KEY_SLASH, SDL_SCANCODE_SLASH},
		{KEY_BACKSLASH, SDL_SCANCODE_BACKSLASH},
		{KEY_QUOTE, SDL_SCANCODE_APOSTROPHE},
		{KEY_SEMICOLON, SDL_SCANCODE_SEMICOLON},
		{KEY_COMMA, SDL_SCANCODE_COMMA},
		{KEY_FULLSTOP, SDL_SCANCODE_PERIOD},
		{KEY_UP, SDL_SCANCODE_UP},
		{KEY_DOWN, SDL_SCANCODE_DOWN},
		{KEY_RIGHT, SDL_SCANCODE_RIGHT},
		{KEY_LEFT, SDL_SCANCODE_LEFT}
	};


	bool Input::KeyPressed(KeyCode keycode) {
		if (keymap.find(keycode) == keymap.end()) return false;
		const Uint8* state = SDL_GetKeyboardState(NULL);
		if (state[keymap[keycode]]) return true;
		return false;
	}

}